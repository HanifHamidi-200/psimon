//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Entity Framework EntityObject template.
// Code is generated on: 10/23/2018 3:00:18 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using System.Reflection;
using System.Linq.Expressions;
using System.Data.EntityClient;
using System.Data.Metadata.Edm;
using System.Data.Objects;
using System.Data.Objects.DataClasses;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("Model", "Egypt1_Program1", "Egypt1", RelationshipMultiplicity.One, typeof(Model.Egypt1), "Program1s", RelationshipMultiplicity.Many, typeof(Model.Program1), true)]
[assembly: EdmRelationshipAttribute("Model", "OilGas1_Program1", "OilGas1", RelationshipMultiplicity.One, typeof(Model.OilGas1), "Program1s", RelationshipMultiplicity.Many, typeof(Model.Program1), true)]
[assembly: EdmRelationshipAttribute("Model", "Robotic1_Program1", "Robotic1", RelationshipMultiplicity.One, typeof(Model.Robotic1), "Program1s", RelationshipMultiplicity.Many, typeof(Model.Program1), true)]
[assembly: EdmRelationshipAttribute("Model", "Supermarket1_Program1", "Supermarket1", RelationshipMultiplicity.One, typeof(Model.Supermarket1), "Program1s", RelationshipMultiplicity.Many, typeof(Model.Program1), true)]

#endregion

namespace Model
{

    #region Entities

    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class Entities : ObjectContext
    {
        #region Constructors

        /// <summary>
        /// Initialize a new Entities object.
        /// </summary>
        public Entities() : 
                base(@"name=EntitiesConnectionString", "Entities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }

        /// <summary>
        /// Initializes a new Entities object using the connection string found in the 'Entities' section of the application configuration file.
        /// </summary>
        public Entities(string connectionString) : 
                base(connectionString, "Entities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }

        /// <summary>
        /// Initialize a new Entities object.
        /// </summary>
        public Entities(EntityConnection connection) : base(connection, "Entities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }

        #endregion

        #region Partial Methods

        partial void OnContextCreated();

        #endregion

        #region ObjectSet Properties

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Egypt1> Egypt1s
        {
            get
            {
                if ((_Egypt1s == null))
                {
                    _Egypt1s = base.CreateObjectSet<Egypt1>("Egypt1s");
                }
                return _Egypt1s;
            }
        }
        private ObjectSet<Egypt1> _Egypt1s;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<OilGas1> OilGas1s
        {
            get
            {
                if ((_OilGas1s == null))
                {
                    _OilGas1s = base.CreateObjectSet<OilGas1>("OilGas1s");
                }
                return _OilGas1s;
            }
        }
        private ObjectSet<OilGas1> _OilGas1s;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Robotic1> Robotic1s
        {
            get
            {
                if ((_Robotic1s == null))
                {
                    _Robotic1s = base.CreateObjectSet<Robotic1>("Robotic1s");
                }
                return _Robotic1s;
            }
        }
        private ObjectSet<Robotic1> _Robotic1s;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Supermarket1> Supermarket1s
        {
            get
            {
                if ((_Supermarket1s == null))
                {
                    _Supermarket1s = base.CreateObjectSet<Supermarket1>("Supermarket1s");
                }
                return _Supermarket1s;
            }
        }
        private ObjectSet<Supermarket1> _Supermarket1s;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Program1> Program1s
        {
            get
            {
                if ((_Program1s == null))
                {
                    _Program1s = base.CreateObjectSet<Program1>("Program1s");
                }
                return _Program1s;
            }
        }
        private ObjectSet<Program1> _Program1s;

        #endregion
        #region AddTo Methods

        /// <summary>
        /// Deprecated Method for adding a new object to the Egypt1s EntitySet.
        /// </summary>
        public void AddToEgypt1s(Egypt1 egypt1)
        {
            base.AddObject("Egypt1s", egypt1);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the OilGas1s EntitySet.
        /// </summary>
        public void AddToOilGas1s(OilGas1 oilGas1)
        {
            base.AddObject("OilGas1s", oilGas1);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the Robotic1s EntitySet.
        /// </summary>
        public void AddToRobotic1s(Robotic1 robotic1)
        {
            base.AddObject("Robotic1s", robotic1);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the Supermarket1s EntitySet.
        /// </summary>
        public void AddToSupermarket1s(Supermarket1 supermarket1)
        {
            base.AddObject("Supermarket1s", supermarket1);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the Program1s EntitySet.
        /// </summary>
        public void AddToProgram1s(Program1 program1)
        {
            base.AddObject("Program1s", program1);
        }

        #endregion
    }

    #endregion
}

namespace Model
{

    /// <summary>
    /// There are no comments for Model.Egypt1 in the schema.
    /// </summary>
    /// <KeyProperties>
    /// NID
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="Model", Name="Egypt1")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Egypt1 : EntityObject    {
        #region Factory Method

        /// <summary>
        /// Create a new Egypt1 object.
        /// </summary>
        /// <param name="nID">Initial value of NID.</param>
        public static Egypt1 CreateEgypt1(int nID)
        {
            Egypt1 egypt1 = new Egypt1();
            egypt1.NID = nID;
            return egypt1;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for NID in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int NID
        {
            get
            {
                int value = _NID;
                OnGetNID(ref value);
                return value;
            }
            set
            {
                if (_NID != value)
                {
                  OnNIDChanging(ref value);
                  ReportPropertyChanging("NID");
                  _NID = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("NID");
                  OnNIDChanged();
              }
            }
        }
        private int _NID;
        partial void OnGetNID(ref int value);
        partial void OnNIDChanging(ref int value);
        partial void OnNIDChanged();
    
        /// <summary>
        /// There are no comments for SSeen in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string SSeen
        {
            get
            {
                string value = _SSeen;
                OnGetSSeen(ref value);
                return value;
            }
            set
            {
                if (_SSeen != value)
                {
                  OnSSeenChanging(ref value);
                  ReportPropertyChanging("SSeen");
                  _SSeen = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("SSeen");
                  OnSSeenChanged();
              }
            }
        }
        private string _SSeen;
        partial void OnGetSSeen(ref string value);
        partial void OnSSeenChanging(ref string value);
        partial void OnSSeenChanged();
    
        /// <summary>
        /// There are no comments for SUnseen in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string SUnseen
        {
            get
            {
                string value = _SUnseen;
                OnGetSUnseen(ref value);
                return value;
            }
            set
            {
                if (_SUnseen != value)
                {
                  OnSUnseenChanging(ref value);
                  ReportPropertyChanging("SUnseen");
                  _SUnseen = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("SUnseen");
                  OnSUnseenChanged();
              }
            }
        }
        private string _SUnseen;
        partial void OnGetSUnseen(ref string value);
        partial void OnSUnseenChanging(ref string value);
        partial void OnSUnseenChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for Program1s in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "Egypt1_Program1", "Program1s")]
        public virtual EntityCollection<Program1> Program1s
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Program1>("Model.Egypt1_Program1", "Program1s");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Program1>("Model.Egypt1_Program1", "Program1s", value);
                }
            }
        }

        #endregion
    }

    /// <summary>
    /// There are no comments for Model.OilGas1 in the schema.
    /// </summary>
    /// <KeyProperties>
    /// NQualificationKey
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="Model", Name="OilGas1")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class OilGas1 : EntityObject    {
        #region Factory Method

        /// <summary>
        /// Create a new OilGas1 object.
        /// </summary>
        /// <param name="nQualificationKey">Initial value of NQualificationKey.</param>
        public static OilGas1 CreateOilGas1(int nQualificationKey)
        {
            OilGas1 oilGas1 = new OilGas1();
            oilGas1.NQualificationKey = nQualificationKey;
            return oilGas1;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for SLocation in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string SLocation
        {
            get
            {
                string value = _SLocation;
                OnGetSLocation(ref value);
                return value;
            }
            set
            {
                if (_SLocation != value)
                {
                  OnSLocationChanging(ref value);
                  ReportPropertyChanging("SLocation");
                  _SLocation = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("SLocation");
                  OnSLocationChanged();
              }
            }
        }
        private string _SLocation;
        partial void OnGetSLocation(ref string value);
        partial void OnSLocationChanging(ref string value);
        partial void OnSLocationChanged();
    
        /// <summary>
        /// There are no comments for SShape in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string SShape
        {
            get
            {
                string value = _SShape;
                OnGetSShape(ref value);
                return value;
            }
            set
            {
                if (_SShape != value)
                {
                  OnSShapeChanging(ref value);
                  ReportPropertyChanging("SShape");
                  _SShape = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("SShape");
                  OnSShapeChanged();
              }
            }
        }
        private string _SShape;
        partial void OnGetSShape(ref string value);
        partial void OnSShapeChanging(ref string value);
        partial void OnSShapeChanged();
    
        /// <summary>
        /// There are no comments for NSize in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual global::System.Nullable<int> NSize
        {
            get
            {
                global::System.Nullable<int> value = _NSize;
                OnGetNSize(ref value);
                return value;
            }
            set
            {
                if (_NSize != value)
                {
                  OnNSizeChanging(ref value);
                  ReportPropertyChanging("NSize");
                  _NSize = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("NSize");
                  OnNSizeChanged();
              }
            }
        }
        private global::System.Nullable<int> _NSize;
        partial void OnGetNSize(ref global::System.Nullable<int> value);
        partial void OnNSizeChanging(ref global::System.Nullable<int> value);
        partial void OnNSizeChanged();
    
        /// <summary>
        /// There are no comments for NQualificationKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int NQualificationKey
        {
            get
            {
                int value = _NQualificationKey;
                OnGetNQualificationKey(ref value);
                return value;
            }
            set
            {
                if (_NQualificationKey != value)
                {
                  OnNQualificationKeyChanging(ref value);
                  ReportPropertyChanging("NQualificationKey");
                  _NQualificationKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("NQualificationKey");
                  OnNQualificationKeyChanged();
              }
            }
        }
        private int _NQualificationKey;
        partial void OnGetNQualificationKey(ref int value);
        partial void OnNQualificationKeyChanging(ref int value);
        partial void OnNQualificationKeyChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for Program1s in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "OilGas1_Program1", "Program1s")]
        public virtual EntityCollection<Program1> Program1s
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Program1>("Model.OilGas1_Program1", "Program1s");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Program1>("Model.OilGas1_Program1", "Program1s", value);
                }
            }
        }

        #endregion
    }

    /// <summary>
    /// There are no comments for Model.Robotic1 in the schema.
    /// </summary>
    /// <KeyProperties>
    /// NID
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="Model", Name="Robotic1")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Robotic1 : EntityObject    {
        #region Factory Method

        /// <summary>
        /// Create a new Robotic1 object.
        /// </summary>
        /// <param name="nID">Initial value of NID.</param>
        public static Robotic1 CreateRobotic1(int nID)
        {
            Robotic1 robotic1 = new Robotic1();
            robotic1.NID = nID;
            return robotic1;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for NID in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int NID
        {
            get
            {
                int value = _NID;
                OnGetNID(ref value);
                return value;
            }
            set
            {
                if (_NID != value)
                {
                  OnNIDChanging(ref value);
                  ReportPropertyChanging("NID");
                  _NID = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("NID");
                  OnNIDChanged();
              }
            }
        }
        private int _NID;
        partial void OnGetNID(ref int value);
        partial void OnNIDChanging(ref int value);
        partial void OnNIDChanged();
    
        /// <summary>
        /// There are no comments for SPlan in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string SPlan
        {
            get
            {
                string value = _SPlan;
                OnGetSPlan(ref value);
                return value;
            }
            set
            {
                if (_SPlan != value)
                {
                  OnSPlanChanging(ref value);
                  ReportPropertyChanging("SPlan");
                  _SPlan = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("SPlan");
                  OnSPlanChanged();
              }
            }
        }
        private string _SPlan;
        partial void OnGetSPlan(ref string value);
        partial void OnSPlanChanging(ref string value);
        partial void OnSPlanChanged();
    
        /// <summary>
        /// There are no comments for SControl in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string SControl
        {
            get
            {
                string value = _SControl;
                OnGetSControl(ref value);
                return value;
            }
            set
            {
                if (_SControl != value)
                {
                  OnSControlChanging(ref value);
                  ReportPropertyChanging("SControl");
                  _SControl = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("SControl");
                  OnSControlChanged();
              }
            }
        }
        private string _SControl;
        partial void OnGetSControl(ref string value);
        partial void OnSControlChanging(ref string value);
        partial void OnSControlChanged();
    
        /// <summary>
        /// There are no comments for NVersion in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual global::System.Nullable<int> NVersion
        {
            get
            {
                global::System.Nullable<int> value = _NVersion;
                OnGetNVersion(ref value);
                return value;
            }
            set
            {
                if (_NVersion != value)
                {
                  OnNVersionChanging(ref value);
                  ReportPropertyChanging("NVersion");
                  _NVersion = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("NVersion");
                  OnNVersionChanged();
              }
            }
        }
        private global::System.Nullable<int> _NVersion;
        partial void OnGetNVersion(ref global::System.Nullable<int> value);
        partial void OnNVersionChanging(ref global::System.Nullable<int> value);
        partial void OnNVersionChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for Program1s in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "Robotic1_Program1", "Program1s")]
        public virtual EntityCollection<Program1> Program1s
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Program1>("Model.Robotic1_Program1", "Program1s");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Program1>("Model.Robotic1_Program1", "Program1s", value);
                }
            }
        }

        #endregion
    }

    /// <summary>
    /// There are no comments for Model.Supermarket1 in the schema.
    /// </summary>
    /// <KeyProperties>
    /// NID
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="Model", Name="Supermarket1")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Supermarket1 : EntityObject    {
        #region Factory Method

        /// <summary>
        /// Create a new Supermarket1 object.
        /// </summary>
        /// <param name="nID">Initial value of NID.</param>
        public static Supermarket1 CreateSupermarket1(int nID)
        {
            Supermarket1 supermarket1 = new Supermarket1();
            supermarket1.NID = nID;
            return supermarket1;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for NID in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int NID
        {
            get
            {
                int value = _NID;
                OnGetNID(ref value);
                return value;
            }
            set
            {
                if (_NID != value)
                {
                  OnNIDChanging(ref value);
                  ReportPropertyChanging("NID");
                  _NID = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("NID");
                  OnNIDChanged();
              }
            }
        }
        private int _NID;
        partial void OnGetNID(ref int value);
        partial void OnNIDChanging(ref int value);
        partial void OnNIDChanged();
    
        /// <summary>
        /// There are no comments for NType in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual global::System.Nullable<int> NType
        {
            get
            {
                global::System.Nullable<int> value = _NType;
                OnGetNType(ref value);
                return value;
            }
            set
            {
                if (_NType != value)
                {
                  OnNTypeChanging(ref value);
                  ReportPropertyChanging("NType");
                  _NType = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("NType");
                  OnNTypeChanged();
              }
            }
        }
        private global::System.Nullable<int> _NType;
        partial void OnGetNType(ref global::System.Nullable<int> value);
        partial void OnNTypeChanging(ref global::System.Nullable<int> value);
        partial void OnNTypeChanged();
    
        /// <summary>
        /// There are no comments for NQuantity in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual global::System.Nullable<int> NQuantity
        {
            get
            {
                global::System.Nullable<int> value = _NQuantity;
                OnGetNQuantity(ref value);
                return value;
            }
            set
            {
                if (_NQuantity != value)
                {
                  OnNQuantityChanging(ref value);
                  ReportPropertyChanging("NQuantity");
                  _NQuantity = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("NQuantity");
                  OnNQuantityChanged();
              }
            }
        }
        private global::System.Nullable<int> _NQuantity;
        partial void OnGetNQuantity(ref global::System.Nullable<int> value);
        partial void OnNQuantityChanging(ref global::System.Nullable<int> value);
        partial void OnNQuantityChanged();
    
        /// <summary>
        /// There are no comments for NPrice in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual global::System.Nullable<decimal> NPrice
        {
            get
            {
                global::System.Nullable<decimal> value = _NPrice;
                OnGetNPrice(ref value);
                return value;
            }
            set
            {
                if (_NPrice != value)
                {
                  OnNPriceChanging(ref value);
                  ReportPropertyChanging("NPrice");
                  _NPrice = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("NPrice");
                  OnNPriceChanged();
              }
            }
        }
        private global::System.Nullable<decimal> _NPrice;
        partial void OnGetNPrice(ref global::System.Nullable<decimal> value);
        partial void OnNPriceChanging(ref global::System.Nullable<decimal> value);
        partial void OnNPriceChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for Program1s in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "Supermarket1_Program1", "Program1s")]
        public virtual EntityCollection<Program1> Program1s
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Program1>("Model.Supermarket1_Program1", "Program1s");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Program1>("Model.Supermarket1_Program1", "Program1s", value);
                }
            }
        }

        #endregion
    }

    /// <summary>
    /// There are no comments for Model.Program1 in the schema.
    /// </summary>
    /// <KeyProperties>
    /// NID
    /// Egypt1NID
    /// NQualificationKey
    /// Robotic1NID
    /// Supermarket1NID
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="Model", Name="Program1")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Program1 : EntityObject    {
        #region Factory Method

        /// <summary>
        /// Create a new Program1 object.
        /// </summary>
        /// <param name="nID">Initial value of NID.</param>
        /// <param name="egypt1NID">Initial value of Egypt1NID.</param>
        /// <param name="nQualificationKey">Initial value of NQualificationKey.</param>
        /// <param name="robotic1NID">Initial value of Robotic1NID.</param>
        /// <param name="supermarket1NID">Initial value of Supermarket1NID.</param>
        public static Program1 CreateProgram1(int nID, int egypt1NID, int nQualificationKey, int robotic1NID, int supermarket1NID)
        {
            Program1 program1 = new Program1();
            program1.NID = nID;
            program1.Egypt1NID = egypt1NID;
            program1.NQualificationKey = nQualificationKey;
            program1.Robotic1NID = robotic1NID;
            program1.Supermarket1NID = supermarket1NID;
            return program1;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for NID in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int NID
        {
            get
            {
                int value = _NID;
                OnGetNID(ref value);
                return value;
            }
            set
            {
                if (_NID != value)
                {
                  OnNIDChanging(ref value);
                  ReportPropertyChanging("NID");
                  _NID = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("NID");
                  OnNIDChanged();
              }
            }
        }
        private int _NID;
        partial void OnGetNID(ref int value);
        partial void OnNIDChanging(ref int value);
        partial void OnNIDChanged();
    
        /// <summary>
        /// There are no comments for BFeasible in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual global::System.Nullable<bool> BFeasible
        {
            get
            {
                global::System.Nullable<bool> value = _BFeasible;
                OnGetBFeasible(ref value);
                return value;
            }
            set
            {
                if (_BFeasible != value)
                {
                  OnBFeasibleChanging(ref value);
                  ReportPropertyChanging("BFeasible");
                  _BFeasible = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("BFeasible");
                  OnBFeasibleChanged();
              }
            }
        }
        private global::System.Nullable<bool> _BFeasible;
        partial void OnGetBFeasible(ref global::System.Nullable<bool> value);
        partial void OnBFeasibleChanging(ref global::System.Nullable<bool> value);
        partial void OnBFeasibleChanged();
    
        /// <summary>
        /// There are no comments for BWilldo in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual global::System.Nullable<bool> BWilldo
        {
            get
            {
                global::System.Nullable<bool> value = _BWilldo;
                OnGetBWilldo(ref value);
                return value;
            }
            set
            {
                if (_BWilldo != value)
                {
                  OnBWilldoChanging(ref value);
                  ReportPropertyChanging("BWilldo");
                  _BWilldo = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("BWilldo");
                  OnBWilldoChanged();
              }
            }
        }
        private global::System.Nullable<bool> _BWilldo;
        partial void OnGetBWilldo(ref global::System.Nullable<bool> value);
        partial void OnBWilldoChanging(ref global::System.Nullable<bool> value);
        partial void OnBWilldoChanged();
    
        /// <summary>
        /// There are no comments for DDate in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual global::System.Nullable<System.DateTime> DDate
        {
            get
            {
                global::System.Nullable<System.DateTime> value = _DDate;
                OnGetDDate(ref value);
                return value;
            }
            set
            {
                if (_DDate != value)
                {
                  OnDDateChanging(ref value);
                  ReportPropertyChanging("DDate");
                  _DDate = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("DDate");
                  OnDDateChanged();
              }
            }
        }
        private global::System.Nullable<System.DateTime> _DDate;
        partial void OnGetDDate(ref global::System.Nullable<System.DateTime> value);
        partial void OnDDateChanging(ref global::System.Nullable<System.DateTime> value);
        partial void OnDDateChanged();
    
        /// <summary>
        /// There are no comments for NAmount in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual global::System.Nullable<int> NAmount
        {
            get
            {
                global::System.Nullable<int> value = _NAmount;
                OnGetNAmount(ref value);
                return value;
            }
            set
            {
                if (_NAmount != value)
                {
                  OnNAmountChanging(ref value);
                  ReportPropertyChanging("NAmount");
                  _NAmount = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("NAmount");
                  OnNAmountChanged();
              }
            }
        }
        private global::System.Nullable<int> _NAmount;
        partial void OnGetNAmount(ref global::System.Nullable<int> value);
        partial void OnNAmountChanging(ref global::System.Nullable<int> value);
        partial void OnNAmountChanged();
    
        /// <summary>
        /// There are no comments for Egypt1NID in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int Egypt1NID
        {
            get
            {
                int value = _Egypt1NID;
                OnGetEgypt1NID(ref value);
                return value;
            }
            set
            {
                if (_Egypt1NID != value)
                {
                  OnEgypt1NIDChanging(ref value);
                  ReportPropertyChanging("Egypt1NID");
                  _Egypt1NID = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Egypt1NID");
                  OnEgypt1NIDChanged();
              }
            }
        }
        private int _Egypt1NID;
        partial void OnGetEgypt1NID(ref int value);
        partial void OnEgypt1NIDChanging(ref int value);
        partial void OnEgypt1NIDChanged();
    
        /// <summary>
        /// There are no comments for NQualificationKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int NQualificationKey
        {
            get
            {
                int value = _NQualificationKey;
                OnGetNQualificationKey(ref value);
                return value;
            }
            set
            {
                if (_NQualificationKey != value)
                {
                  OnNQualificationKeyChanging(ref value);
                  ReportPropertyChanging("NQualificationKey");
                  _NQualificationKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("NQualificationKey");
                  OnNQualificationKeyChanged();
              }
            }
        }
        private int _NQualificationKey;
        partial void OnGetNQualificationKey(ref int value);
        partial void OnNQualificationKeyChanging(ref int value);
        partial void OnNQualificationKeyChanged();
    
        /// <summary>
        /// There are no comments for Robotic1NID in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int Robotic1NID
        {
            get
            {
                int value = _Robotic1NID;
                OnGetRobotic1NID(ref value);
                return value;
            }
            set
            {
                if (_Robotic1NID != value)
                {
                  OnRobotic1NIDChanging(ref value);
                  ReportPropertyChanging("Robotic1NID");
                  _Robotic1NID = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Robotic1NID");
                  OnRobotic1NIDChanged();
              }
            }
        }
        private int _Robotic1NID;
        partial void OnGetRobotic1NID(ref int value);
        partial void OnRobotic1NIDChanging(ref int value);
        partial void OnRobotic1NIDChanged();
    
        /// <summary>
        /// There are no comments for Supermarket1NID in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int Supermarket1NID
        {
            get
            {
                int value = _Supermarket1NID;
                OnGetSupermarket1NID(ref value);
                return value;
            }
            set
            {
                if (_Supermarket1NID != value)
                {
                  OnSupermarket1NIDChanging(ref value);
                  ReportPropertyChanging("Supermarket1NID");
                  _Supermarket1NID = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Supermarket1NID");
                  OnSupermarket1NIDChanged();
              }
            }
        }
        private int _Supermarket1NID;
        partial void OnGetSupermarket1NID(ref int value);
        partial void OnSupermarket1NIDChanging(ref int value);
        partial void OnSupermarket1NIDChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for Egypt1 in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "Egypt1_Program1", "Egypt1")]
        public virtual Egypt1 Egypt1
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Egypt1>("Model.Egypt1_Program1", "Egypt1").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Egypt1>("Model.Egypt1_Program1", "Egypt1").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for Egypt1 in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Egypt1> Egypt1Reference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Egypt1>("Model.Egypt1_Program1", "Egypt1");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Egypt1>("Model.Egypt1_Program1", "Egypt1", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Egypt1>("Model.Egypt1_Program1", "Egypt1").Value = null;
                }
            }
        }
    
        /// <summary>
        /// There are no comments for OilGas1 in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "OilGas1_Program1", "OilGas1")]
        public virtual OilGas1 OilGas1
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<OilGas1>("Model.OilGas1_Program1", "OilGas1").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<OilGas1>("Model.OilGas1_Program1", "OilGas1").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for OilGas1 in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<OilGas1> OilGas1Reference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<OilGas1>("Model.OilGas1_Program1", "OilGas1");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<OilGas1>("Model.OilGas1_Program1", "OilGas1", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<OilGas1>("Model.OilGas1_Program1", "OilGas1").Value = null;
                }
            }
        }
    
        /// <summary>
        /// There are no comments for Robotic1 in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "Robotic1_Program1", "Robotic1")]
        public virtual Robotic1 Robotic1
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Robotic1>("Model.Robotic1_Program1", "Robotic1").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Robotic1>("Model.Robotic1_Program1", "Robotic1").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for Robotic1 in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Robotic1> Robotic1Reference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Robotic1>("Model.Robotic1_Program1", "Robotic1");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Robotic1>("Model.Robotic1_Program1", "Robotic1", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Robotic1>("Model.Robotic1_Program1", "Robotic1").Value = null;
                }
            }
        }
    
        /// <summary>
        /// There are no comments for Supermarket1 in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "Supermarket1_Program1", "Supermarket1")]
        public virtual Supermarket1 Supermarket1
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Supermarket1>("Model.Supermarket1_Program1", "Supermarket1").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Supermarket1>("Model.Supermarket1_Program1", "Supermarket1").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for Supermarket1 in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Supermarket1> Supermarket1Reference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Supermarket1>("Model.Supermarket1_Program1", "Supermarket1");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Supermarket1>("Model.Supermarket1_Program1", "Supermarket1", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Supermarket1>("Model.Supermarket1_Program1", "Supermarket1").Value = null;
                }
            }
        }

        #endregion
    }

}
